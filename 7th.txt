• Finding the real Fourier bases vectors for N=4 (vector dimension):
N=4;
theta=[0 1 2 3]*2*pi/4;
b0 =cos(0*theta); b0= b0/norm(b0);
b1=cos(1*theta);b1=b1/norm(b1);
b2=cos(2*theta);b2=b2/norm(b2);
b3=sin(1*theta);b3=b3/norm(b3);
% b0,b1,b2,b3 forms orthonormal basis for R4
 B=[b0;b1;b2;b3]; % B will be the orthogonal matrix
 B'*B % Verify orthogonality of B

• Finding the complex Fourier bases vectors for N=4 (vector dimension):
 N=4;
 theta=[0 1 2 3]*2*pi/4;
 b0 =exp(0*i*theta); b0= b0/norm(b0);
 b1=exp(-1*i*theta); b1=b1/norm(b1);
 b2=exp(-2*i*theta); b2=b2/norm(b2);
 b3=exp(-3*i*theta); b3=b3/norm(b3);
% b0,b1,b2,b3 forms complex orthonormal basis
U=[b0;b1;b2;b3]; % U will be a unitary matrix
U'*U % Verify U is unitary

OR

 N=4;
 theta=[0 1 2 3]*2*pi/4;
 b0 =exp(0*i*theta); b0= b0/norm(b0);
 b1=exp(1*i*theta); b1=b1/norm(b1);
 b2=exp(2*i*theta); b2=b2/norm(b2);
 b3=exp(3*i*theta); b3=b3/norm(b3);
% b0,b1,b2,b3 forms complex orthonormal basis
 U=[b0;b1;b2;b3]; % U will be a unitary matrix
 U'*U % Verify U is unitary
• Finding DFT using in-built Matlab command
>> x=[1;2;3;4]; y=fft(x)
 % MATLAB uses fast fourier transform (FFT) to find DFT

• Finding the DFT matrix 𝜴𝟒 and then find the DFT of a signal x:
N=4;
theta=[0 1 2 3]*2*pi/4;
b0 =exp(0*i*theta);
b1=exp(-1*i*theta);
b2=exp(-2*i*theta);
b3=exp(-3*i*theta);
Omega4=[b0;b1;b2;b3]; %DFT matrix
x=[1 ; 2; 3; 4]; % given signal
y=Omega4*x; % DFT of the signal using DFT matrix
y1=fft(x); % DFT of the signal using in built MATLAB command

• Retrieval of the signal x from its DFT y: (continuation from previous code)
FMatrix=Omega4’ % Fourier Matrix
Xretrieved=(1/N)*FMatrix*y % Retrieval of signal using Fourier Matrix
X1=ifft(y) % Retrieval of signal using in-built MATLAB command

• Creation of orthonormal DFT matrix and Fourier matrix using normalised complex basis
vectors (N=4)
theta=[0 1 2 3]*2*pi/4;
b0 =exp(0*i*theta); b0= b0/norm(b0);
b1=exp(-1*i*theta); b1=b1/norm(b1);
b2=exp(-2*i*theta); b2=b2/norm(b2);
b3=exp(-3*i*theta); b3=b3/norm(b3);
% b0,b1,b2,b3 forms complex normalised orthonormal basis
OrthDFTM=[b0;b1;b2;b3]; % will be a unitary matrix
OrthFM= OrthDFTM’ % will be a unitary matrix
OR
N=4;
theta=[0 1 2 3]*2*pi/4;
b0 =exp(0*i*theta);
b1=exp(-1*i*theta);
b2=exp(-2*i*theta);
b3=exp(-3*i*theta);
OrthDFTM=(1/sqrt(N))*[b0;b1;b2;b3]
OrthFM= OrthDFTM’ % will be a unitary matrix

• Creation of DFT and Fourier matrices using in-built MATLAB command
>> N = 4; % length of the signal
>> dft = fft(eye(N)) % Ω4 matrix directly
>> fm=dft’ % F4 matrix directly

• Creation of orthonormal DFT matrix using in-built Matlab command
>> N = 4; % length of the signal
>> dft = (1/sqrt(N))*fft(eye(N)) % normalized bases\

**Matrix and Vector Operations – Complex Analysis and Fourier Transform**

---

**1. Hermitian of Given Vectors/Matrices**

(a) \( u = \begin{bmatrix} 2 - 5i \\ 5i \\ 9 \\ 8 + 2i \end{bmatrix} \Rightarrow u^H = \begin{bmatrix} 2 + 5i & -5i & 9 & 8 - 2i \end{bmatrix} \)

(b) \( P = \begin{bmatrix} 7 - i & 2 + i & 9i \\ 1 & 3 - i & 6i \\ 9i & 7 & 9i \end{bmatrix} \Rightarrow P^H = \begin{bmatrix} 7 + i & 1 & -9i \\ 2 - i & 3 + i & 7 \\ -9i & -6i & -9i \end{bmatrix} \)

(c) \( M = \begin{bmatrix} 8 & 2 - i & 2i \\ 2 + i & 4 & i - 2 \\ 5 - 2i & -2 - i & 9 \\ 8 + i & 9 - 4i & 7i \end{bmatrix} \Rightarrow M^H = \begin{bmatrix} 8 & 2 + i & 5 + 2i & 8 - i \\ 2 + i & 4 & -2 + i & 9 + 4i \\ -2i & -i + 2 & 9 & -7i \end{bmatrix} \)

---

**2. Conjugate Transpose of A and B and Verify (AB)^H = B^H A^H**

\( A = \begin{bmatrix} i & 1 + i & 4 \\ 5 & -i & 2i \\ 4i & 1 + 5i & 3 - 2i \end{bmatrix} \)
\( B = \begin{bmatrix} 3 & 1 + i & 4 \\ 5i & 7 & 2i \\ i & 1 + 5i & 9 \end{bmatrix} \)

(a) Find \( A^H \) and \( B^H \) by taking the complex conjugate and transpose.
(b) Compute \( (AB)^H \) and compare it with \( B^H A^H \)

---

**3. Inner Products and Vector Norms**

\( u = \begin{bmatrix} 1 \\ i \\ 1 + i \end{bmatrix}, \quad v = \begin{bmatrix} 2 - i \\ 3i \\ -5i \end{bmatrix}, \quad w = \begin{bmatrix} -3 + i \\ 4i \\ 9 \end{bmatrix} \)

(a) \( \langle u, v \rangle \quad \) (b) \( \langle w, v \rangle \quad \) (c) \( \langle u, w \rangle \)
(d) \( \langle v, u \rangle \quad \) (e) \( \langle v, w \rangle \quad \) (f) \( \langle w, u \rangle \)
(g) \( \langle u, v + w \rangle \quad \) (h) Find \( ||u||, ||v||, ||w|| \)
(i) Normalize u, v, and w.

---

**4. Orthonormality Check and Matrix Operations**

\( u = \begin{bmatrix} 1 \\ -0.5 + 0.866i \\ -0.5 - 0.866i \end{bmatrix}, \quad v = \begin{bmatrix} 1 \\ -0.5 - 0.866i \\ -0.5 + 0.866i \end{bmatrix}, \quad w = \begin{bmatrix} 1 \\ 1 \\ 1 \end{bmatrix} \)

(a) Check orthonormality of u, v, w
(b) Form matrix \( A = [u \ v \ w] \)
(c) Compute \( AA^H \) and \( A^H A \)

---

**5. Classification as Unitary or Hermitian**

(a) \( A = \begin{bmatrix} 0 & i & 0 \\ 0 & 0 & i \\ i & 0 & 0 \end{bmatrix} \)
(b) \( B = \begin{bmatrix} 3 & 2 - i & 5 + 2i \\ 2 + i & 4 & i - 2 \\ 5 - 2i & -2 - i & 9 \end{bmatrix} \)
(c) \( C = \begin{bmatrix} i & 1 + i & 4 \\ -1 + i & -i & 2 - i \\ -4 & -2 + i & -2i \end{bmatrix} \)

---

**6. Eigenvalues of Matrices A, B, C and Verification of Properties**

Use characteristic polynomial and diagonalization to find and verify eigenvalues.

---

**7. Orthogonality of Vectors**

\( u = \begin{bmatrix} i \\ 1 \\ 0 \end{bmatrix}, \quad v = \begin{bmatrix} -i \\ 1 \\ 0 \end{bmatrix}, \quad w = \begin{bmatrix} 1 \\ i \\ 1 + i \end{bmatrix} \)

Check if all pairs are orthogonal: \( \langle u, v \rangle, \langle v, w \rangle, \langle w, u \rangle \)

---

**8. Orthonormal Basis for \( \mathbb{R}^7 \) using Fourier Basis**

Construct 7 Fourier basis vectors: \( e_k[n] = \frac{1}{\sqrt{7}} e^{2\pi i kn/7} \)

---

**9. Six Orthogonal Vectors using Fourier Bases**

Form matrix \( A = [v_1 \ v_2 \ldots \ v_6] \)
Compute \( A^T A \) and \( AA^T \)

---

**10. Unitary Matrix of Order 9**

Create \( Q \in \mathbb{C}^{9 \times 9} \) such that \( Q^H Q = I \)

---

**11. Fourier Matrix \( F_7 \) and DFT Matrix \( \Omega_7 \)**

Compute \( F_7 = \frac{1}{\sqrt{7}} [ e^{-2\pi i kn/7} ] \)
\( \Omega_7 = [ e^{-2\pi i kn/7} ] \)

---

**12. DFT of \( x(n) = [1,2,1,2,1,2,1,2,1] \) using \( \Omega_9 \)**

Use DFT matrix \( \Omega_9 \), then compute \( F_9^{-1} X \) to retrieve signal.

---

**13. DFT of \( x(n) = [9,8,7,6,5,4,3,2] \) using \( \Omega_8 \)**

Compute DFT using \( \Omega_8 \), retrieve using \( F_8^{-1} \)

---

**14. MATLAB DFT of Order 100**

Generate using `dftmtx(100)`, compute DFT of signal of all ones, retrieve using inverse.

---

**15. DFT of \( x(n) = [1, 2, 1, 3] \) using \( \Omega_4 \)**

Compute \( X = \Omega_4 x \), then use \( x = \frac{1}{4} \Omega_4^{-1} X \)

---

End of Document.






Question 1

a)
u = [2-5*i;5*i;9;8+2*i]
u'

b)
P = [7-i 2+i 9*i;1 3-i 6*i;9*i 7 9*i]
P'

c)
M = [8 2-i 2*i;2+i 4 i-2;5-2*i -2-i 9;8+i 9-4*i 7*i]
M'

Q2)
A = [i 1+i 4;5 -i 2*i;4*i 1+5*i 3-2*i]
B = [3 1+i 4;5*i 7 2*i;i 1+5*i 9]
A'
B'
(A*B)'
B'*A'

Q3)
u = [1;i;1+i]
v = [2-i;3*i;-5*i]
w = [-3+i;4*i;9]
u'*v
w'*v
u'*w
v'*u
w'*u
u'*(v+w)
sqrt(u'*u)
sqrt(v'*v)
sqrt(w'*w)
u./sqrt(u'*u)
v./sqrt(v'*v)
w./sqrt(w'*w)

Q4)
u = [1;-0.5+0.866*i;-0.5-0.866*i]
v = [1;-0.5-0.866*i;-0.5+0.866*i]
w = [1;1;1]
u'*u
v'*v
w'*w
u'*v
v'*w
w'*u
A = [u v w]
A*A'
A'*A

Q5)
A = [0 i 0;0 0 i;i 0 0]
B = [3 2-i 5+2*i;2+i 4 i-2;5-2*i -2-i 9]
C = [i 1+i 4;-1+i -i 2-i;-4 -2+i -2*i]
A - A'
B - B'
C - C'
A'*A
B'*B
C'*C

Q6)
eig(A)

eig(B)
eig(C)

Q7)
u  = [i;1;0]
v = [-i;1;0]
w = [1;i;1+i]
u'*v
v'*w
w'*u
u'*w
v'*u
w'*v

Q8)
N=7;
theta=[0 1 2 3 4 5 6]*2*pi/N;
b0 =cos(0*theta); b0= b0/norm(b0);
b1=cos(1*theta);b1=b1/norm(b1);
b2=cos(2*theta);b2=b2/norm(b2);
b3=cos(3*theta);b3=b3/norm(b3);
b4=sin(1*theta);b4=b4/norm(b4);
b5=sin(2*theta);b5=b5/norm(b5);
b6=sin(3*theta);b6=b6/norm(b6);

 B=[b0;b1;b2;b3;b4;b5;b6]; 
 B'*B 

Q9)
N = 6;
theta = [0 1 2 3 4 5] * 2 * pi / N;
a0 = cos(0 * theta); a0 = a0 / norm(a0);
a1 = cos(1 * theta); a1 = a1 / norm(a1);
a2 = cos(2 * theta); a2 = a2 / norm(a2);
a3 = sin(1 * theta); a3 = a3 / norm(a3);
a4 = sin(2 * theta); a4 = a4 / norm(a4);
a5 = sin(3 * theta); a5 = a5 / norm(a5);

A = [a0; a1; a2; a3; a4; a5];
A'*A
A*A'


Q10)
N = 9;
theta = (0:8) * 2 * pi / N;

b0 = cos(0 * theta); b0 = b0 / norm(b0);
b1 = cos(1 * theta); b1 = b1 / norm(b1);
b2 = cos(2 * theta); b2 = b2 / norm(b2);
b3 = cos(3 * theta); b3 = b3 / norm(b3);
b4 = cos(4 * theta); b4 = b4 / norm(b4);
b5 = sin(1 * theta); b5 = b5 / norm(b5);
b6 = sin(2 * theta); b6 = b6 / norm(b6);
b7 = sin(3 * theta); b7 = b7 / norm(b7);
b8 = sin(4 * theta); b8 = b8 / norm(b8);

Q = [b0; b1; b2; b3; b4; b5; b6; b7; b8];
Q'*Q
Q*Q'


Q11)
N = 7;
Omega7 = fft(eye(N))
F7 = (1/sqrt(N)) * Omega7


Q12)
x = [1; 2; 1; 2; 1; 2; 1; 2; 1];
N = length(x);
Omega9 = fft(eye(N));
F9 = Omega9'
y = Omega9 * x
x_reconstructed = (1/N) * F9 * y


Q13)

x = [9; 8; 7; 6; 5; 4; 3; 2];
N = length(x);
Omega8 = fft(eye(N));
F8 = Omega8'

y = Omega8 * x
x_reconstructed = (1/N) * F8 * y


Q14)
N = 100;
x = ones(N, 1);
Omega100 = fft(eye(N));
F100 = Omega100'
y = Omega100 * x
x_reconstructed = (1/N) * F100 * y


Q15)
x = [1; 2; 1; 3];
N = 4;
theta = (0:N-1) * 2 * pi / N;

b0 = exp(0i * theta);
b1 = exp(-1i * theta);
b2 = exp(-2i * theta);
b3 = exp(-3i * theta);

Omega4 = [b0; b1; b2; b3]
F4 = conj(Omega4)

y = Omega4 * x
x_reconstructed = (1/N) * F4' * y


